package fit5170.assignment;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 * RoomJFrame is the second screen in the hotel booking process
 * It handles the room types for a particular hotel that the customer has chosen
 * in the first screen and check the availability for a given room type, as well
 * as displaying the price for the room
 * 
 * @author Bhavik Maneck
 */
public class RoomsJFrame extends javax.swing.JFrame {
    
    private Socket server;
    private InetAddress address;
    private BufferedReader reader;
    private DataOutputStream os;
    private DataInputStream is;
    private PrintStream writer;
    
    //Maintain this information to allow user to go back with same information
    //Also to pass onto next step
    private String hotelName;
    private String city;
    private Date checkIn;
    private Date checkOut;
    
    //This is used to keep information about each room type for 
    //the particular hotel selected so that it can be passed on
    //to the next (booking) screen easily
    private  Map<String, Map<String, String>> roomsInfo;
    
    /**
     * Creates new form RoomsJFrame
     * 
     * Making a RoomsJFrame requires the user to have already selected
     * the city, hotel and dates for their stay
     */
    public RoomsJFrame(String selectedHotelName, String selectedCity, Date selectedCheckIn, Date selectedCheckOut) {
        initComponents();
        
        hotelName = selectedHotelName;
        city = selectedCity;
        checkIn = selectedCheckIn;
        checkOut = selectedCheckOut;
        
        choice2.setEnabled(false);
        jTextFieldRate.setEnabled(true);
        jTextFieldTotal.setEnabled(true);
        
        roomsInfo = new HashMap<String, Map<String, String>>();
        
        setupRoomChoice();
    }
    
    /**
     * Creates new form RoomsJFrame
     * 
     * This constructor is for when a user is navigating back from the final
     * booking screen, so they have already selected options in this screen.
     * Each control is set back to what the user had already selected
     * 
     */
    public RoomsJFrame(String selectedHotelName, String selectedCity, Date selectedCheckIn, Date selectedCheckOut, String room, String rooms) {
        initComponents();
        
        hotelName = selectedHotelName;
        city = selectedCity;
        checkIn = selectedCheckIn;
        checkOut = selectedCheckOut;
        
        jTextFieldRate.setEnabled(true);
        jTextFieldTotal.setEnabled(true);
        
        roomsInfo = new HashMap<String, Map<String, String>>();
        
        setupRoomChoice();
        choice1.select(room);
        getAvailability();
        choice2.select(rooms);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        choice1 = new java.awt.Choice();
        jLabel4 = new javax.swing.JLabel();
        choice2 = new java.awt.Choice();
        jTextFieldRate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldTotal = new javax.swing.JTextField();
        jButtonBack = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 3, 18)); // NOI18N
        jLabel1.setText("Hotel Booking System - Select Room");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 3, 18)); // NOI18N
        jLabel2.setText("Hotel Booking System - Select Room");

        jLabel3.setText("Room Type:");

        choice1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice1ItemStateChanged(evt);
            }
        });

        jLabel4.setText("Rooms to Book:");

        choice2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice2ItemStateChanged(evt);
            }
        });

        jLabel5.setText("Room Rate:");

        jLabel6.setText("Total Cost:");

        jButtonBack.setText("< Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonNext.setText("Next >");
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(38, 38, 38))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonBack)
                                .addGap(25, 25, 25)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonNext)
                            .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldRate)
                            .addComponent(choice2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel2)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(choice2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNext)
                    .addComponent(jButtonBack))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //When a different room is selected, check the availability of it
    private void choice1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice1ItemStateChanged
        getAvailability();
    }//GEN-LAST:event_choice1ItemStateChanged

    //When the user is ready to go to next screen
    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        
        //Check if user has selected a room that has availability before moving to booking screen
        if (choice1.getSelectedItem().equals("Choose Rooms...") || !choice2.isEnabled())
        {
            JOptionPane.showMessageDialog(null, "Must choose an available room first.");
        } else {
            dispose();
            ClientJFrame clientWindow = new ClientJFrame(hotelName,city,checkIn,checkOut,choice1.getSelectedItem(),choice2.getSelectedItem(),jTextFieldTotal.getText());
            clientWindow.setVisible(true);
        }
    }//GEN-LAST:event_jButtonNextActionPerformed
    
    //Whenever the number of rooms for booking is changed update the total price displayed
    private void choice2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice2ItemStateChanged
        int rate = Integer.parseInt(jTextFieldRate.getText());
        int rooms = Integer.parseInt(choice2.getSelectedItem());
        jTextFieldTotal.setText(new Integer(rate*rooms).toString());
    }//GEN-LAST:event_choice2ItemStateChanged
    
    //Go back to first screen where user selects city, hotel and dates of stay
    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        dispose();
        MainJFrame mainWindow = new MainJFrame(city,hotelName,formatter.format(checkIn),formatter.format(checkOut));
        mainWindow.setVisible(true);
    }//GEN-LAST:event_jButtonBackActionPerformed
    
    //Used by action listeners and other setup methods that need data
    //to populate the view to setup connection to Broker to request information
    //or submit data
    private void setupBrokerConnection() {
        
        try {
            address = InetAddress.getByName("localhost");
            server = new Socket(address, 8000);

            os = new DataOutputStream(server.getOutputStream());
            is = new DataInputStream(server.getInputStream());
            reader = new BufferedReader(new InputStreamReader(is));
            writer = new PrintStream(os);
        } catch(Exception e) {
            e.printStackTrace();   
        }
        
    }
    
    //When a room type is selected check the number of rooms available for the dates 
    //selected by the user
    private void getAvailability() {
        setupBrokerConnection();
        
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        
        //JSON request to broker for information about availability
        String requestType = "GET";
        String requestName = "availability";
        JSONObject obj = new JSONObject();
        obj.put("request_type", requestType);
        obj.put("request_name", requestName);
        obj.put("city_name", city);
        obj.put("hotel", hotelName);
        obj.put("room", choice1.getSelectedItem());
        obj.put("check_in",formatter.format(checkIn));
        obj.put("check_out",formatter.format(checkOut));
        
        writer.println(obj);
            
        JSONObject brokerJsonResponse = new JSONObject();
        try {
            brokerJsonResponse = new JSONObject(reader.readLine());
        } catch(IOException e) {
            e.printStackTrace();
        }

        System.out.println(brokerJsonResponse.toString()); //for debug
        
        JSONArray array = brokerJsonResponse.getJSONArray("results");
        
        //Build up internal store of room information, to avoid repeat calls
        //when moving to next step
        Map room = roomsInfo.get(choice1.getSelectedItem());
        
        //Calculate rooms available for this room type and add each number
        //starting from 1 to the number that can be booked
        int roomsBooked = 0;
        int roomsAvailable = Integer.parseInt((String)room.get("capacity"));
        if (array.length() > 0)
        {
            for(int i = 0 ; i < array.length() ; i++) {
                roomsBooked = Integer.parseInt(array.getJSONObject(i).getString("rooms_booked"));
            }
        }
        roomsAvailable -= roomsBooked;
        
        //First get rid of all the number available as there might already be some numbers
        choice2.removeAll();
        
        if (roomsAvailable > 0)
        {
            choice2.setEnabled(true);
            for (int i = 1; i <= roomsAvailable; i++)
            {
                choice2.add(new Integer(i).toString());
            }
            jTextFieldRate.setText((String)room.get("room_rate"));
            jTextFieldTotal.setText((String)room.get("room_rate"));
        } else {
            
            //If there are no rooms available for this room type
            choice2.setEnabled(false);
            jTextFieldRate.setText("");
            jTextFieldTotal.setText("");
            
            JOptionPane.showMessageDialog(null, "There none of this room type available for the dates you selected.");
        }
        
    }
    
    //Get all the room types available for this hotel and city
    private void setupRoomChoice() {
        setupBrokerConnection();
        
        String requestType = "GET";
        String requestName = "rooms";
        JSONObject obj = new JSONObject();
        obj.put("request_type", requestType);
        obj.put("request_name", requestName);
        obj.put("city_name", city);
        obj.put("hotel", hotelName);
        
        writer.println(obj);
        
        //get response from broker
        JSONObject brokerJsonResponse = new JSONObject();
        try {
            brokerJsonResponse = new JSONObject(reader.readLine());
        } catch(IOException e) {
            e.printStackTrace();
        }

        System.out.println(brokerJsonResponse.toString()); //for debug
        
        //add response to choice menu
        JSONArray array = brokerJsonResponse.getJSONArray("results");
        if (array.length() > 0)
        {
            choice1.add("Choose Rooms...");
            for(int i = 0 ; i < array.length() ; i++) {
                Map room = new HashMap<String, String>();
                choice1.add(array.getJSONObject(i).getString("room_type"));
                
                room.put("room_rate",array.getJSONObject(i).getString("room_rate"));
                room.put("capacity",array.getJSONObject(i).getString("capacity"));
                roomsInfo.put(array.getJSONObject(i).getString("room_type"), room);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice choice1;
    private java.awt.Choice choice2;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jTextFieldRate;
    private javax.swing.JTextField jTextFieldTotal;
    // End of variables declaration//GEN-END:variables
}
