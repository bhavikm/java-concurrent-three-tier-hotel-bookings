package fit5170.assignment;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.Socket;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 * The MainJFrame class is the first screen for the booking process
 * 
 * In this class the user must select the city, hotel brand, check-in
 * and check-out dates they want to make a booking for
 * 
 * This client communicates to a broker through JSON requests and responses
 * and is thus very loosely coupled to the logic and data of the application
 * 
 * @author Bhavik Maneck
 */
public class MainJFrame extends javax.swing.JFrame {
    
    //Store Broker communication information as class members
    //to allow repeat use from different methods 
    //Note: the connection must be re-made each time through 
    //the setupBrokerConnection() method to communicate over TCP socket
    private Socket server;
    private InetAddress address;
    private BufferedReader reader;
    private DataOutputStream os;
    private DataInputStream is;
    private PrintStream writer;
    
    /**
     * Creates new form MainJFrame
     * 
     * Used from main method
     */
    public MainJFrame() {
        initComponents();
        
        setupBrokerConnection();
        
        // Setup City Name choice menu with city names
        // Retrieves names dynamically with request to broker
        setupCityNameChoice();
        choice2.setEnabled(false);

    }

    //This constructor allows MainJFrame to be constructed after a user navigates
    //back from the second screen of the booking process, thus it requires already
    //selected information to be given so that the state is the same
    public MainJFrame(String city,String hotel,String checkIn,String checkOut) {
        initComponents();
                
        jTextFieldCheckIn.setText(checkIn);
        jTextFieldCheckOut.setText(checkOut);
        
        setupBrokerConnection();
        
        setupCityNameChoice();
        setupHotelChoice(city);
        
        choice1.select(city);
        choice2.select(hotel);

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        choice1 = new java.awt.Choice();
        jLabel2 = new javax.swing.JLabel();
        jButtonNext = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        choice2 = new java.awt.Choice();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldCheckOut = new javax.swing.JTextField();
        jTextFieldCheckIn = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 3, 18)); // NOI18N
        jLabel1.setText("Hotel Booking System - Select hotel");

        choice1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice1ItemStateChanged(evt);
            }
        });

        jLabel2.setText("City:");

        jButtonNext.setText("Next >");
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        jLabel3.setText("Hotel:");

        jLabel4.setText("Check In Date:");

        jLabel5.setText("Check Out Date:");

        jLabel6.setText("dd/mm/yyyy");

        jLabel7.setText("dd/mm/yyyy");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(choice2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonNext)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel6))))
                    .addComponent(jLabel1))
                .addContainerGap(211, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(choice2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(24, 24, 24)
                .addComponent(jButtonNext)
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //When the user clicks the 'Next' button to move to the next step
    //Handle validation before allowing user to move to next screen
    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        //Check if user selected city, hotel and correct dats.
        //If not, diplay error alert
        if (choice1.getSelectedItem().equals("Choose City...")) {
            JOptionPane.showMessageDialog(null, "You must select a city first.");
        } else if (choice2.isEnabled() && choice2.getSelectedItem().equals("Choose Hotel..."))
        {
            JOptionPane.showMessageDialog(null, "You must select a hotel first.");
        } else {
            setupBrokerConnection();
            
            //Validate dates through Broker
            //Dates must be non-empty, valid date formats,
            //after today's date and check-out must be greater 
            //than check-in date
            
            String requestType = "VALIDATE";
            String requestName = "dates";

            JSONObject obj = new JSONObject();

            obj.put("request_type", requestType);
            obj.put("request_name", requestName);
            obj.put("check_in", jTextFieldCheckIn.getText().trim());
            obj.put("check_out", jTextFieldCheckOut.getText().trim());    
            
            writer.println(obj);

            JSONObject brokerJsonResponse = new JSONObject();
            try {
                brokerJsonResponse = new JSONObject(reader.readLine());
            } catch(IOException e) {
                e.printStackTrace();
            }

            String error = brokerJsonResponse.getString("error");
            
            //If there is no error with dates go to next step
            if (error.equals("None"))
            {
                //Setup dates to pass to next frame
                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                Date checkIn = new Date();
                Date checkOut = new Date();
                try {
                    checkIn = formatter.parse(jTextFieldCheckIn.getText().trim());
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                try {
                    checkOut = formatter.parse(jTextFieldCheckOut.getText().trim());
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                
                //Get rid of this frame
                dispose();
                
                //launch next frame
                RoomsJFrame roomWindow = new RoomsJFrame(choice2.getSelectedItem(),choice1.getSelectedItem(),checkIn,checkOut);
                roomWindow.setVisible(true);
                
            } else {
                //There was an error with dates so show the message from Broker
                JOptionPane.showMessageDialog(null, error);
            }
            
        }
        
    }//GEN-LAST:event_jButtonNextActionPerformed

    //When ever a city is changed in the drop down menu update the
    //possible hotels for that city in the choice2 drop down menu
    private void choice1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice1ItemStateChanged
        String cityChosen = choice1.getSelectedItem();
        if (!cityChosen.equals("Choose City..."))
        {
            choice2.setEnabled(true);
            choice2.removeAll();
            setupHotelChoice(cityChosen);
        } else {
            choice2.removeAll();
            choice2.setEnabled(false);
        }
    }//GEN-LAST:event_choice1ItemStateChanged
    
    //Used by action listeners and other setup methods that need data
    //to populate the view to setup connection to Broker to request information
    //or submit data
    private void setupBrokerConnection() {
        
        try {
            address = InetAddress.getByName("localhost");
            server = new Socket(address, 8000);

            //BufferedWriter out = new BufferedWriter(new OutputStreamWriter(server.getOutputStream()));
            os = new DataOutputStream(server.getOutputStream());
            is = new DataInputStream(server.getInputStream());
            reader = new BufferedReader(new InputStreamReader(is));
            writer = new PrintStream(os);
        } catch(Exception e) {
            e.printStackTrace();   
        }
        
    }
    
    //Set up the available city names that have hotels operating
    private void setupCityNameChoice() {
        String requestType = "GET";
        String requestName = "city_names";
        JSONObject obj = new JSONObject();
        obj.put("request_type", requestType);
        obj.put("request_name", requestName);
        
        writer.println(obj);
            
        JSONObject brokerJsonResponse = new JSONObject();
        try {
            brokerJsonResponse = new JSONObject(reader.readLine());
        } catch(IOException e) {
            e.printStackTrace();
        }

        System.out.println(brokerJsonResponse.toString());
        
        //add response to choice menu
        choice1.add("Choose City...");
        JSONArray array = brokerJsonResponse.getJSONArray("results");
        for(int i = 0 ; i < array.length() ; i++){
            choice1.add(array.getJSONObject(i).getString("city_name"));
        }
    }
    
    //Given a chosen city, get all the hotels for that city
    private void setupHotelChoice(String city) {
        setupBrokerConnection();
        
        //Setup JSON request
        String requestType = "GET";
        String requestName = "hotels";
        JSONObject obj = new JSONObject();
        obj.put("request_type", requestType);
        obj.put("request_name", requestName);
        obj.put("city_name", city);
        
        //Request data from Broker through JSON request over TCP socket connection
        writer.println(obj);
            
        //Receive JSON reponse from Broker over TCP socket connection
        JSONObject brokerJsonResponse = new JSONObject();
        try {
            brokerJsonResponse = new JSONObject(reader.readLine());
        } catch(IOException e) {
            e.printStackTrace();
        }

        System.out.println(brokerJsonResponse.toString()); //for debug
        
        //add hotel data to drop down menu
        JSONArray array = brokerJsonResponse.getJSONArray("results");
        if (array.length() > 0)
        {
            choice2.add("Choose Hotel...");
            for(int i = 0 ; i < array.length() ; i++) {
                choice2.add(array.getJSONObject(i).getString("hotel_name"));
            }
        } else {
            choice2.removeAll();
            choice2.setEnabled(false);
        }
    }
    
    /**
     * No arguments required for main run
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice choice1;
    private java.awt.Choice choice2;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextFieldCheckIn;
    private javax.swing.JTextField jTextFieldCheckOut;
    // End of variables declaration//GEN-END:variables
}
